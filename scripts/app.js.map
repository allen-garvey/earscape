{"version":3,"sources":["init.js","array.js","models.js","controllers.js","app.js"],"names":[],"mappings":"AAAA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvnfile":"app.js","sourcesContent":["//top level object for earscape app\nvar ESC = {};","/*\n* Utility array functions\n*/\nESC.array = {};\n/*\n* Shuffle function taken from:\n* http://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n*/\nESC.array.shuffle = function(array) {\n    var cloneArray = array.slice(0);\n    var currentIndex = cloneArray.length;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n        // Pick a remaining element...\n        var randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        var temporaryValue = cloneArray[currentIndex];\n        cloneArray[currentIndex] = cloneArray[randomIndex];\n        cloneArray[randomIndex] = temporaryValue;\n    }\n\n  return cloneArray;\n}\n\nESC.array.randItem = function(array){\n\treturn array[Math.floor(Math.random() * array.length)];\n}\n/*\n* Returns array of numbers from start to end exclusive (one less than the end number)\n*/\nESC.array.range = function(start, end){\n    var a = [];\n    for (var i = start; i < end; i++) {\n        a.push(i);\n    };\n    return a;\n}","ESC.models = {};\n\n/*\n* Model for pitch information\n* noteNum is integer 0-11 with C being 0\n* octave is integer 1-8\n*/\nESC.models.Pitch = function(noteNum, octave){\n\tthis.noteNum = noteNum;\n\tthis.octave = octave;\n}\n\nESC.models.Pitch.pitchNames = ['C', 'C#', 'D', 'Eb', 'E', 'F', 'F#', 'G', 'Ab', 'A', 'Bb', 'B'];\n\nESC.models.Pitch.prototype.toNotation = function(){\n\treturn ESC.models.Pitch.pitchNames[this.noteNum].replace('b', '@') + '/' + this.octave;\n}\nESC.models.Pitch.prototype.toString = function(){\n\treturn ESC.models.Pitch.pitchNames[this.noteNum] + this.octave;\n}\nESC.models.Pitch.prototype.toHTML = function(){\n\treturn ESC.models.Pitch.pitchNames[this.noteNum].replace('#', '&#9839;').replace('b', '&#9837;');\n}\n/*\n* gets total value of Pitch by combining noteNum and octave\n* used to get inversion\n*/\nESC.models.Pitch.prototype.totalValue = function(){\n\treturn this.octave * 12 + this.noteNum;\n}\nESC.models.Pitch.prototype.transpose = function(halfSteps){\n\tvar newValue = this.totalValue() + halfSteps;\n\tthis.noteNum = newValue % 12;\n\tthis.octave = Math.floor(newValue / 12);\n}\nESC.models.Pitch.pitchFromTotalValue = function(totalValue){\n\tvar pitch = new ESC.models.Pitch(0, 0);\n\tpitch.transpose(totalValue);\n\treturn pitch;\n}\nESC.models.Pitch.prototype.copy = function(){\n\treturn new ESC.models.Pitch(this.noteNum, this.octave);\n}\n\n/*\n* Model for rhythm information\n* duration is the number of 64th note triplets in note (i.e quarter is 24) - lowest number is 1\n* duration can also be string value (i.e. quarter) - taken from name keys in durationInfo\n*/\nESC.models.Rhythm = function(duration){\n\tif(typeof duration === 'string' && isNaN(parseInt(duration))){\n\t\tduration = this.nameToDuration(duration);\t\n\t}\n\telse{\n\t\tduration = parseInt(duration);\n\t}\n\tthis.duration = duration;\n}\nESC.models.Rhythm.durationMap = { '6' : {name : 'sixteenth', notation : ':16'}, \n\t\t\t\t\t\t\t\t\t\t\t'12' : {name : 'eighth', notation: ':16'}, \n\t\t\t\t\t\t\t\t\t\t\t'18' : {name : 'dottedEighth', notation : ':8d'}, \n\t\t\t\t\t\t\t\t\t\t\t'24': {name: 'quarter', notation: ':q'}, \n\t\t\t\t\t\t\t\t\t\t\t'36' : {name: 'dottedQuarter', notation: ':qd'}, \n\t\t\t\t\t\t\t\t\t\t\t'48' : {name: 'half', notation : ':h'},\n\t\t\t\t\t\t\t\t\t\t\t'72' : {name: 'dottedHalf', notation : ':hd'},\n\t\t\t\t\t\t\t\t\t\t\t'96' : {name : 'whole', notation : ':w'}\n\t\t\t\t\t\t\t\t\t\t};\nESC.models.Rhythm.prototype.nameToDuration = function(name){\n\tfor(var key in ESC.models.Rhythm.durationMap){\n\t\tif(ESC.models.Rhythm.durationMap[key].name === name){\n\t\t\treturn parseInt(key);\n\t\t}\n\t}\n}\nESC.models.Rhythm.prototype.toString = function() {\n\treturn ESC.models.Rhythm.durationMap[this.duration].name;\n}\nESC.models.Rhythm.prototype.toNotation = function(){\n\treturn ESC.models.Rhythm.durationMap[this.duration].notation;\t\n}\n\n/*\n* Model for melody, which is a container for pitch and rhythm information\n* pitches is array of Pitches\n* rhythms is array of Rhythms\n*/\nESC.models.Melody = function(){\n\tthis.pitches = [];\n\tthis.rhythms = [];\n\tthis.tempo = 120;\n\tthis.timeSignature = {top: 4, bottom: 4};\n}\nESC.models.Melody.transformationTypes = ['original', 'inversion', 'retrograde', 'retrograde_inversion'];\n/*\n* Returns string formatted for vextab to turn into notation\n*/\nESC.models.Melody.prototype.toNotation = function(){\n\tvar notation = 'tabstave notation=true tablature=false\\nnotes';\n\tvar len = this.pitches.length;\n\tfor (var i = 0; i < len; i++) {\n\t\tnotation = notation + ' ' + this.rhythms[i].toNotation() + ' ' + this.pitches[i].toNotation();\n\t};\n\treturn notation;\n}\n/*\n* Returns Band.js player instance - call .play function to play melody\n* options is {} with possible values of tempo : int\n*/\nESC.models.Melody.prototype.getPlayer = function(conductor){\n\tconductor.setTimeSignature(this.timeSignature.top, this.timeSignature.bottom);\n\tvar piano = conductor.createInstrument();\n\tvar len = this.pitches.length;\n\tfor (var i = 0; i < len; i++) {\n\t\tpiano.note(this.rhythms[i].toString(), this.pitches[i].toString());\n\t};\n\treturn conductor.finish();\n}\nESC.models.Melody.prototype.getTitle = function(){\n\tvar title = '';\n\tthis.pitches.forEach(function(pitch) {\n\t\ttitle = title + pitch.toHTML() + '-';\n\t});\n\treturn title.slice(0, - 1);\n}\n\nESC.models.Melody.prototype.copy = function(){\n\tvar copy = new ESC.models.Melody();\n\tcopy.tempo = this.tempo;\n\tcopy.timeSignature.top = this.timeSignature.top;\n\tcopy.timeSignature.bottom = this.timeSignature.bottom; \n\tvar len = this.pitches.length;\n\tfor (var i = 0; i < len; i++) {\n\t\tcopy.pitches.push(this.pitches[i].copy());\n\t\tcopy.rhythms.push(new ESC.models.Rhythm(this.rhythms[i].duration));\n\t};\n\treturn copy;\n}\nESC.models.Melody.prototype.retrograde = function(){\n\tvar retrograde = this.copy();\n\tretrograde.pitches.reverse();\n\tretrograde.rhythms.reverse();\n\treturn retrograde;\n}\n/*\n* Inversion does not handle octave changes correctly (for now)\n*/\nESC.models.Melody.prototype.inversion = function(){\n\tvar inverse = this.copy();\n\n\tvar diffArray = [inverse.pitches[0].totalValue()];\n\tfor (var i = 1; i < inverse.pitches.length; i++) {\n\t\tvar currentTotalValue = inverse.pitches[i].totalValue();\n\t\tdiffArray.push(currentTotalValue);\n\t\tvar diff =  currentTotalValue - diffArray[i-1];\n\t\t\n\t\tinverse.pitches[i] = ESC.models.Pitch.pitchFromTotalValue(inverse.pitches[i-1].totalValue() - diff);\n\t};\n\treturn inverse;\n}\nESC.models.Melody.prototype.retrogradeInversion = function(){\n\treturn this.retrograde().inversion();\n}\n\n/*\n* Melody Factory\n* Class to conveniently build various kinds of melodies\n*/\nESC.models.MelodyFactory = function(){};\n\nESC.models.MelodyFactory.getToneRow = function(){\n\tvar melody = new ESC.models.Melody();\n\tvar pitches = ESC.array.shuffle(ESC.array.range(0,12));\n\tfor(var i=0;i<12;i++){\n\t\tmelody.pitches.push(new ESC.models.Pitch(pitches[i], 4));\n\t\tmelody.rhythms.push(ESC.models.MelodyFactory.randRhythm());\n\t}\n\treturn melody;\n}\n/*\n* Return ESC.models.Rhythm object of random duration\n*/\nESC.models.MelodyFactory.randRhythm = function(){\n\treturn new ESC.models.Rhythm(ESC.array.randItem(Object.keys(ESC.models.Rhythm.durationMap)));\n}\n/*\n* Takes a melody and return a new melody with pitches replaced with new random ones\n* @param melody - instance of ESC.models.Melody\n*/\nESC.models.MelodyFactory.replacePitches = function(melody){\n\tvar newMelody = melody.copy();\n\tnewMelody.pitches = [];\n\tvar len = melody.pitches.length;\n\tvar pitches = ESC.array.shuffle(ESC.array.range(0,12));\n\tfor (var i = 0; i < len; i++) {\n\t\tnewMelody.pitches.push(new ESC.models.Pitch(pitches[i], 4));\n\t};\n\treturn newMelody;\n}\n\n/*\n* Takes a melody and return a new melody with rhythms replaced with new random ones\n* @param melody - instance of ESC.models.Melody\n*/\nESC.models.MelodyFactory.replaceRhythms = function(melody){\n\tvar newMelody = melody.copy();\n\tnewMelody.rhythms = [];\n\tvar len = melody.rhythms.length;\n\tfor (var i = 0; i < len; i++) {\n\t\tnewMelody.rhythms.push(ESC.models.MelodyFactory.randRhythm());\n\t};\n\treturn newMelody;\n}","ESC.controllers = {};\n\n/*\n* PlayItem - container for playlist items\n* @param melody is instance of ESC.models.Melody\n* baseMelody is original melody before any transformations\n* currentMelody is the current melody after any transformations (inversion, retrograde, etc)\n*/\nESC.controllers.PlayItem = function(melody){\n\tthis.baseMelody = melody;\n\tthis.currentMelody = melody;\n\tthis.isStarred = false;\n\tthis.melodyState = 'original';\n}\n/* \n* options is {} with possible values of tempo : int\n*/\nESC.controllers.PlayItem.prototype.play = function(conductor){\n\treturn this.currentMelody.getPlayer(conductor);\n}\nESC.controllers.PlayItem.prototype.getNotation = function(){\n\treturn this.currentMelody.toNotation();\n}\nESC.controllers.PlayItem.prototype.getTitle = function(){\n\treturn this.currentMelody.getTitle();\n}\n\nESC.controllers.PlayItem.prototype.setTransformation = function(type){\n\tif(type === 'retrograde'){\n\t\tthis.currentMelody = this.baseMelody.retrograde();\n\t\tthis.melodyState = type;\n\t}\n\telse if(type === 'inversion'){\n\t\tthis.currentMelody = this.baseMelody.inversion();\n\t\tthis.melodyState = type;\n\t}\n\telse if(type === 'retrograde_inversion'){\n\t\tthis.currentMelody = this.baseMelody.retrogradeInversion();\n\t\tthis.melodyState = type;\t\n\t}\n\t//type is original\n\telse{\n\t\tthis.currentMelody = this.baseMelody;\n\t\tthis.melodyState = 'original';\n\t}\n}\nESC.controllers.PlayItem.prototype.toHTML = function(){\n\treturn this.getTitle() + '<span class=\"star\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 50 50\"><path d=\"M11,47.8c-0.3,0-0.5-0.1-0.8-0.3c-0.5-0.4-0.6-0.9-0.5-1.4l5-15.5L1.6,21c-0.5-0.4-0.6-0.9-0.5-1.4c0.1-0.5,0.6-0.9,1.3-0.9h16.4l4.9-15.6c0.1-0.5,0.6-0.9,1.3-0.9s1,0.4,1.3,0.9l5,15.6h16.4c0.5,0,1,0.3,1.3,0.8c0.3,0.5,0,1.2-0.5,1.4l-13.1,9.5l5,15.5c0.1,0.5,0,1.2-0.5,1.4c-0.5,0.3-1,0.4-1.5,0L24.9,38l-13.1,9.5C11.5,47.7,11.2,47.8,11,47.8L11,47.8z M24.9,35.1c0.3,0,0.5,0.1,0.8,0.3l10.7,7.9l-4.1-12.6c-0.1-0.5,0-1.2,0.5-1.4l10.7-7.9H30.2c-0.5,0-1-0.4-1.3-0.9l-4-12.6l-4.1,12.6c-0.1,0.5-0.6,0.9-1.3,0.9H6.2l10.7,7.9c0.5,0.4,0.6,0.9,0.5,1.4l-4,12.6l10.7-7.9C24.4,35.2,24.7,35.1,24.9,35.1L24.9,35.1z\"/><path class=\"star_center\" d=\"M24.9,35.1c0.3,0,0.5,0.1,0.8,0.3l10.7,7.9l-4.1-12.6c-0.1-0.5,0-1.2,0.5-1.4l10.7-7.9H30.2c-0.5,0-1-0.4-1.3-0.9l-4-12.6l-4.1,12.6c-0.1,0.5-0.6,0.9-1.3,0.9H6.2l10.7,7.9c0.5,0.4,0.6,0.9,0.5,1.4l-4,12.6l10.7-7.9C24.4,35.2,24.7,35.1,24.9,35.1L24.9,35.1z\"/></svg></span>';\n}\n\n/*\n* Jukebox - master controller for app\n* keeps track of a list of PlayItems\n*/\nESC.controllers.Jukebox = function(){\n\tthis.playItems = [];\n\tthis.currentPlayItemIndex = -1;\n\tthis.currentPlayItem = null;\n\tthis.conductor = new BandJS();\n\tthis.setTempo(120);\n\t\n}\nESC.controllers.Jukebox.prototype.addPlayItem = function(playItem){\n\tthis.playItems.push(playItem);\n\tvar play_items_list = document.getElementById('play_items_list');\n\tplay_items_list.innerHTML = play_items_list.innerHTML + \"<li>\" + playItem.toHTML() +  \"</li>\";\n\tthis.setCurrentPlayItem(this.playItems.length - 1);\n\t//scroll to added item\n\tvar playlist = $('.playlist');\n\tplaylist.scrollTop(playlist[0].scrollHeight);\n}\n\nESC.controllers.Jukebox.prototype.setCurrentPlayItem = function(index){\n\tthis.currentPlayItemIndex = index;\n\tthis.currentPlayItem = this.playItems[index];\n\t\n\t//sets selected state in play_items_list\n\tvar allPlaylistItems = $('#play_items_list li');\n\tallPlaylistItems.removeClass('selected');\n\tallPlaylistItems.eq(index).addClass('selected');\n\n\tthis.displayMelodyState(this.currentPlayItem.melodyState);\n\n\t//displays sheet music\n\tthis.displayCurrentPlayItem();\n}\nESC.controllers.Jukebox.prototype.displayCurrentPlayItem = function(){\n\t//displays notation - adapted from: https://groups.google.com/forum/?fromgroups#!topic/vexflow/sgj9bjcSx9Y\n\tvar artist = new VexTabDiv.Artist(10, 10, 600, {scale: 0.8});\n\tvar vextab = new VexTabDiv.VexTab(artist);\n\t//1 is enum for CANVAS - using VexTabDiv.Flow.Renderer.Backends.CANVAS doesn't work for some reason\n\t//'sheet_music_canvas' is name of id of canvas element\n\tvar renderer = new VexTabDiv.Flow.Renderer('sheet_music_canvas', 1);\n\ttry {\n          vextab.reset();\n          artist.reset();\n          vextab.parse(this.currentPlayItem.getNotation());\n          artist.render(renderer);\n        } catch (e) {\n          console.log(e);\n        }\n}\nESC.controllers.Jukebox.prototype.play = function(){\n\tthis.conductor.setTempo(this.tempo); //changing tempo while song is playing causes weird distortion\n\t//clear instruments since this.currentPlayItem.play(this.conductor) will load instruments into the conductor\n\t//this has the same effect as clearing the last played melody from conductor's memory\n\t//doesn't prevent playing multiple melodies at the same time\n\tthis.conductor.instruments = [];\n\tthis.player = this.currentPlayItem.play(this.conductor);\n\tthis.player.play();\n}\nESC.controllers.Jukebox.prototype.newPlayItem = function(){\n\tthis.addPlayItem(new ESC.controllers.PlayItem(ESC.models.MelodyFactory.getToneRow()));\n}\nESC.controllers.Jukebox.prototype.melodyWithNew = function(attr){\n\tvar newMelody;\n\tif(attr === 'notes'){\n\t\tnewMelody = ESC.models.MelodyFactory.replacePitches(this.currentPlayItem.currentMelody);\n\t}\n\t// replace rhythm\n\telse{\n\t\tnewMelody = ESC.models.MelodyFactory.replaceRhythms(this.currentPlayItem.currentMelody);\n\t}\n\tthis.addPlayItem(new ESC.controllers.PlayItem(newMelody));\n}\nESC.controllers.Jukebox.prototype.transformMelody = function(type){\n\tthis.currentPlayItem.setTransformation(type);\n\tthis.displayMelodyState(this.currentPlayItem.melodyState);\n\tthis.displayCurrentPlayItem();\n}\nESC.controllers.Jukebox.prototype.setTempo = function(tempo){\n\ttempo = parseInt(tempo);\n\tif(!(isNaN(tempo) || tempo > 300 || tempo < 40)){\n\t\tthis.tempo = tempo;\n\t}\n\t$('#tempo_input, #tempo_slider').val(this.tempo);\n}\nESC.controllers.Jukebox.prototype.displayMelodyState = function(melodyState){\n\t$('.transformations li').removeClass('selected');\n\t$('#button_transform_' + melodyState).addClass('selected');\n}\n","ESC.jukebox = new ESC.controllers.Jukebox();\nESC.jukebox.newPlayItem();\ndocument.getElementById('play_button').onclick = function(){ESC.jukebox.play();};\ndocument.getElementById('new_button').onclick = function(){ESC.jukebox.newPlayItem();};\n\ndocument.getElementById('button_replace_notes').onclick = function(){ESC.jukebox.melodyWithNew('notes')};\ndocument.getElementById('button_replace_rhythm').onclick = function(){ESC.jukebox.melodyWithNew('rhythm')};\n\n(function(){\n\tfor (var i = 0; i < ESC.models.Melody.transformationTypes.length; i++) {\n\t\tvar type = ESC.models.Melody.transformationTypes[i];\n\t\t(function(type){document.getElementById('button_transform_' + type).onclick = function(){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tESC.jukebox.transformMelody(type);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})(type);\n\t};\n})();\n\n\n$('#tempo_input, #tempo_slider').on('change', function(event) {\n\tESC.jukebox.setTempo(this.value);\n});\n\n$('#play_items_list').on('click', 'li', function(){\n\tvar index = $('#play_items_list li').index($(this));\n\tESC.jukebox.setCurrentPlayItem(index);\n});\n$('#play_items_list').on('click', '.star', function(e){\n\te.stopPropagation(); //so that play item is not selected\n\t$(this).toggleClass('starred');\n});\n\n\n"],"sourceRoot":"/source/"}